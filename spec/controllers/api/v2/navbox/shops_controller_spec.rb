require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Api::V2::Navbox::ShopsController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Api::V2::Shop. As you add validations to Api::V2::Shop, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    create(:shop)
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  before :each do
    # set accepted default format as json
    request.env['HTTP_ACCEPT'] = 'application/json'
    request.headers.merge! headers
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # Api::V2::ShopsController. Be sure to keep this updated too.
  let(:valid_session) {}
  let(:headers) { { 'X-APP-TOKEN': 'a~rR-*Zd9t~H8wm@CmPd1', 'X-User-Token': 'oxm3-VuaP5u1nsL9DMSE' } }

  describe 'GET #index' do
    it 'returns a success response' do
      valid_attributes
      get :index, params: {}
      expect(response).to have_http_status(:ok)
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      request.headers.merge! headers
      shop = valid_attributes
      get :show, params: { id: shop.to_param }, session: valid_session
      expect(response).to be_successful
    end
  end

  describe 'GET #shop_by_name' do
    it 'returns a success response' do
      request.headers.merge! headers
      shop = valid_attributes
      get :shop_by_name, params: { name: shop.name }, session: valid_session
      expect(response).to be_successful
    end
  end

  #
  #   describe 'POST #create' do
  #     context 'with valid params' do
  #       it 'creates a new Api::V2::Shop' do
  #         expect do
  #           post :create, params: { api / v2_shop => valid_attributes }, session: valid_session
  #         end.to change(Shop, :count).by(1)
  #       end
  #
  #       it 'redirects to the created api/v2_shop' do
  #         post :create, params: { api / v2_shop => valid_attributes }, session: valid_session
  #         expect(response).to redirect_to(Shop.last)
  #       end
  #     end
  #
  #     context 'with invalid params' do
  #       it "returns a success response (i.e. to display the 'new' template)" do
  #         post :create, params: { api / v2_shop => invalid_attributes }, session: valid_session
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  #
  #   describe 'PUT #update' do
  #     context 'with valid params' do
  #       let(:new_attributes) do
  #         skip('Add a hash of attributes valid for your model')
  #       end
  #
  #       it 'updates the requested api/v2_shop' do
  #         shop = valid_attributes
  #         put :update, params: { id: shop.to_param, api / v2_shop => new_attributes }, session: valid_session
  #         shop.reload
  #         skip('Add assertions for updated state')
  #       end
  #
  #       it 'redirects to the api/v2_shop' do
  #         shop = valid_attributes
  #         put :update, params: { id: shop.to_param, api / v2_shop => valid_attributes }, session: valid_session
  #         expect(response).to redirect_to(shop)
  #       end
  #     end
  #
  #     context 'with invalid params' do
  #       it "returns a success response (i.e. to display the 'edit' template)" do
  #         shop = valid_attributes
  #         put :update, params: { id: shop.to_param, api / v2_shop => invalid_attributes }, session: valid_session
  #         expect(response).to be_successful
  #       end
  #     end
  #   end
  #
  #   describe 'DELETE #destroy' do
  #     it 'destroys the requested api/v2_shop' do
  #       shop = valid_attributes
  #       expect do
  #         delete :destroy, params: { id: shop.to_param }, session: valid_session
  #       end.to change(Shop, :count).by(-1)
  #     end
  #
  #     it 'redirects to the api_v2_shops list' do
  #       shop = valid_attributes
  #       delete :destroy, params: { id: shop.to_param }, session: valid_session
  #       expect(response).to redirect_to(api_v2_shops_url)
  #     end
  #   end
  # =end
end
